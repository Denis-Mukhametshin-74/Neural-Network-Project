"""
@file visualizer.py
@brief –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ –¥–∞–Ω–Ω—ã—Ö MNIST
@author Developer1
@version 1.0
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib import gridspec


class NeuralNetworkVisualizer:
    """
    @brief –ö–ª–∞—Å—Å –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞–±–æ—Ç—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–∏

    @details
    –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
    - –ü—Ä–∏–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π MNIST
    - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    - –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    - –ú–∞—Ç—Ä–∏—Ü—É –≤–µ—Å–æ–≤
    """

    def __init__(self):
        """
        @brief –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        """
        plt.rcParams['font.family'] = 'DejaVu Sans'
        plt.rcParams['figure.figsize'] = (10, 6)

    def plot_mnist_samples(self, X, y, num_samples=10, save_path=None):
        """
        @brief –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö MNIST

        @param X: –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        @param y: –ú–µ—Ç–∫–∏ (one-hot encoded)
        @param num_samples: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        @param save_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        """
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º one-hot –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ü–∏—Ñ—Ä—ã
        y_labels = np.argmax(y, axis=1)

        fig, axes = plt.subplots(2, 5, figsize=(12, 5))
        axes = axes.ravel()

        for i in range(num_samples):
            # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–º–µ—Ä
            idx = np.random.randint(0, len(X))
            image = X[idx].reshape(28, 28)
            label = y_labels[idx]

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            axes[i].imshow(image, cmap='gray', interpolation='none')
            axes[i].set_title(f'–¶–∏—Ñ—Ä–∞: {label}', fontsize=12, pad=10)
            axes[i].axis('off')

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            axes[i].grid(False)

        plt.suptitle('üî¢ –ü—Ä–∏–º–µ—Ä—ã —Ä—É–∫–æ–ø–∏—Å–Ω—ã—Ö —Ü–∏—Ñ—Ä –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞ MNIST', fontsize=16, y=1.02)
        plt.tight_layout()

        if save_path:
            plt.savefig(save_path, dpi=150, bbox_inches='tight')
            print(f"üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")

        plt.show()

    def plot_network_architecture(self, input_size=784, hidden_size=128, output_size=10, save_path=None):
        """
        @brief –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–∏

        @param input_size: –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ—è
        @param hidden_size: –†–∞–∑–º–µ—Ä —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–ª–æ—è
        @param output_size: –†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ—è
        @param save_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        """
        fig = plt.figure(figsize=(15, 8))

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        gs = gridspec.GridSpec(1, 3, width_ratios=[3, 2, 1])

        # –í—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π
        ax1 = plt.subplot(gs[0])
        self._draw_layer(ax1, input_size, "–í—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π\n784 –Ω–µ–π—Ä–æ–Ω–∞\n(28√ó28 –ø–∏–∫—Å–µ–ª–µ–π)", 'lightblue')

        # –°–∫—Ä—ã—Ç—ã–π —Å–ª–æ–π
        ax2 = plt.subplot(gs[1])
        self._draw_layer(ax2, hidden_size, "–°–∫—Ä—ã—Ç—ã–π —Å–ª–æ–π\n128 –Ω–µ–π—Ä–æ–Ω–æ–≤\n(Sigmoid)", 'lightgreen')

        # –í—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π
        ax3 = plt.subplot(gs[2])
        self._draw_layer(ax3, output_size, "–í—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π\n10 –Ω–µ–π—Ä–æ–Ω–æ–≤\n(Softmax)", 'lightcoral')

        # –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É —Å–ª–æ—è–º–∏
        self._draw_connections(fig, [0.15, 0.5, 0.85], [input_size, hidden_size, output_size])

        plt.suptitle('üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ü–∏—Ñ—Ä', fontsize=18, y=0.95)
        plt.tight_layout()

        if save_path:
            plt.savefig(save_path, dpi=150, bbox_inches='tight')
            print(f"üèóÔ∏è –°—Ö–µ–º–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {save_path}")

        plt.show()

    def _draw_layer(self, ax, num_neurons, title, color):
        """
        @brief –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–ª–æ—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        """
        ax.set_xlim(0, 1)
        ax.set_ylim(0, num_neurons + 1)

        # –†–∏—Å—É–µ–º –Ω–µ–π—Ä–æ–Ω—ã –∫–∞–∫ –∫—Ä—É–≥–∏
        for i in range(num_neurons):
            circle = plt.Circle((0.5, i + 0.5), 0.3, fill=True, color=color, alpha=0.7)
            ax.add_patch(circle)
            if num_neurons <= 20:  # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ–π—Ä–æ–Ω–æ–≤ –Ω–µ–º–Ω–æ–≥–æ
                ax.text(0.5, i + 0.5, str(i), ha='center', va='center', fontsize=8)

        ax.set_title(title, fontsize=12, pad=20)
        ax.axis('off')

    def _draw_connections(self, fig, x_positions, layer_sizes):
        """
        @brief –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –º–µ–∂–¥—É —Å–ª–æ—è–º–∏
        """
        for i in range(len(x_positions) - 1):
            x1, x2 = x_positions[i], x_positions[i + 1]
            # –†–∏—Å—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            for j in range(min(10, layer_sizes[i])):
                for k in range(min(10, layer_sizes[i + 1])):
                    y1 = (j / min(10, layer_sizes[i])) * layer_sizes[i] + 0.5
                    y2 = (k / min(10, layer_sizes[i + 1])) * layer_sizes[i + 1] + 0.5
                    fig.axes[0].plot([x1 * fig.get_figwidth(), x2 * fig.get_figwidth()],
                                     [y1, y2], 'gray', alpha=0.1, linewidth=0.5)

    def plot_prediction_example(self, model, X, y, num_examples=3, save_path=None):
        """
        @brief –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π

        @param model: –û–±—É—á–µ–Ω–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å
        @param X: –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        @param y: –ò—Å—Ç–∏–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ (one-hot)
        @param num_examples: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        @param save_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        indices = np.random.choice(len(X), num_examples, replace=False)

        fig, axes = plt.subplots(num_examples, 2, figsize=(12, 4 * num_examples))

        for i, idx in enumerate(indices):
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            image = X[idx].reshape(28, 28)
            true_label = np.argmax(y[idx])

            # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = model.forward(X[idx:idx + 1])
            predicted_label = np.argmax(prediction[0])
            confidence = prediction[0][predicted_label]

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if num_examples == 1:
                ax_img = axes[0]
                ax_bar = axes[1]
            else:
                ax_img = axes[i, 0]
                ax_bar = axes[i, 1]

            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            ax_img.imshow(image, cmap='gray')
            ax_img.set_title(f'–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ | –ò—Å—Ç–∏–Ω–Ω–∞—è —Ü–∏—Ñ—Ä–∞: {true_label}', fontsize=14)
            ax_img.axis('off')

            # –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
            classes = list(range(10))
            colors = ['red' if j == predicted_label else 'blue' for j in classes]

            bars = ax_bar.bar(classes, prediction[0], color=colors, alpha=0.7)
            ax_bar.set_xlabel('–¶–∏—Ñ—Ä—ã')
            ax_bar.set_ylabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å')
            ax_bar.set_title(f'–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {predicted_label} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%})', fontsize=14)
            ax_bar.set_xticks(classes)
            ax_bar.grid(True, alpha=0.3)

            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            if predicted_label == true_label:
                ax_bar.text(0.02, 0.95, '‚úÖ –í–ï–†–ù–û', transform=ax_bar.transAxes,
                            fontsize=12, color='green', fontweight='bold')
            else:
                ax_bar.text(0.02, 0.95, '‚ùå –û–®–ò–ë–ö–ê', transform=ax_bar.transAxes,
                            fontsize=12, color='red', fontweight='bold')

        plt.suptitle('üéØ –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–∏', fontsize=16, y=0.98)
        plt.tight_layout()

        if save_path:
            plt.savefig(save_path, dpi=150, bbox_inches='tight')
            print(f"üéØ –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")

        plt.show()